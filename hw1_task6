import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class Top20 {
	public static class Top20Mapper extends Mapper<Object, Text, IntWritable, Text> {
		public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
			StringTokenizer itr = new StringTokenizer(value.toString(), "\r");
			
			while (itr.hasMoreTokens()) {
				String[] kv = itr.nextToken().split(" ");
				context.write(new IntWritable(0), new Text(kv[0].trim() + "," + kv[1].trim()+","+kv[2].trim()));
			}
		}
	}
    
    public static class Top20Reducer extends Reducer<IntWritable,Text,Text,IntWritable> {
    	

		public void reduce(IntWritable key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
    		String word;
    		long wordNo;   	
    		Map<String, Integer> hashmap = new HashMap<String, Integer>();  
      	  
        	hashmap.put("a", 0);   
        	hashmap.put("b", 0);   
        	hashmap.put("c", 0);   
        	hashmap.put("d", 0); 
        	hashmap.put("e", 0);   
        	hashmap.put("f", 0);   
        	hashmap.put("g", 0);   
        	hashmap.put("h", 0); 
        	hashmap.put("i", 0);   
        	hashmap.put("j", 0);   
        	hashmap.put("k", 0);   
        	hashmap.put("l", 0); 
        	hashmap.put("m", 0);   
        	hashmap.put("n", 0);   
        	hashmap.put("o", 0);   
        	hashmap.put("p", 0); 
        	hashmap.put("q", 0);   
        	hashmap.put("r", 0);   
        	hashmap.put("s", 0);   
        	hashmap.put("t", 0); 
        	  
        	List<Map.Entry<String, Integer>> infoIds = new ArrayList<Map.Entry<String, Integer>>(  
        	        hashmap.entrySet());  
        	            
            for (Text val : values) {
                word = val.toString().split(",")[0]+" "+val.toString().split(",")[1];
                wordNo = Integer.parseInt(val.toString().split(",")[2]);
                
                Collections.sort(infoIds, new Comparator<Map.Entry<String, Integer>>() {  
            	    							public int compare(Map.Entry<String, Integer> o1, 
            	    									Map.Entry<String, Integer> o2) {  
            	    										return ( o1.getValue()-o2.getValue());  
            	    									}  
                								}
                );  
                Entry<String,Integer> ent=infoIds.get(0);
                	if (wordNo > ent.getValue()){
                		hashmap.remove(ent.getKey());
                		hashmap.put(word, (int) wordNo);
                	} 
                
            }
            
            for (int i = 0; i < infoIds.size(); i++) {  
            	Entry<String,Integer> ent=infoIds.get(i);  
            	context.write(new Text(ent.getKey()), new IntWritable(ent.getValue()));
            }
         }
          
    	
    	
    
  
    
  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "top20");
    
    job.setJarByClass(Top20.class);
    
    job.setMapperClass(Top20Mapper.class);
    
    job.setCombinerClass(Top20Reducer.class);
    job.setReducerClass(Top20Reducer.class);
    
    job.setOutputKeyClass(Text.class);
    
    job.setOutputValueClass(IntWritable.class);
    
    job.setNumReduceTasks(10);
   
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
}
